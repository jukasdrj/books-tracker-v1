{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "/Users/justingardner/Downloads/xcode/books_tracker_v1/cloudflare-workers/isbndb-biography-worker/.wrangler/tmp/deploy-wrOnFP",
  "sourcesContent": ["/**\n * ISBNdb Biography Worker - Work/Edition Normalization Enhanced\n *\n * Implements 4 validated ISBNdb API patterns with SwiftData-aligned normalization:\n * 1. Author works in English: /author/{name}?language=en\n * 2. Book by ISBN: /book/{isbn}?with_prices=0\n * 3. Title search: /books/{title}?column=title&language=en&shouldMatchAll=1\n * 4. Combined search: /search/books?author=X&text=Y&publisher=Z\n *\n * NEW: Consolidates editions into proper Work/Edition/Author structure\n * matching SwiftData models with external API identifiers\n *\n * Success target: >90% success rate with test authors\n */\n\n// Rate limiting storage\nconst RATE_LIMIT_KEY = 'isbndb_last_request';\nconst RATE_LIMIT_INTERVAL = 1000; // 1 second between requests\n\n// RPC Class for Service Binding with HTTP fetch handler\nclass ISBNdbWorker {\n  constructor(env) {\n    this.env = env;\n  }\n\n  // HTTP fetch method for backward compatibility\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    console.log(`${request.method} ${path} (via RPC class)`);\n\n    try {\n      // Route handling with proven ISBNdb patterns\n      if (path.startsWith('/author/') && request.method === 'GET') {\n        return await handleAuthorRequest(request, env, path, url);\n      } else if (path.startsWith('/book/') && request.method === 'GET') {\n        return await handleBookRequest(request, env, path, url);\n      } else if (path.startsWith('/books/') && request.method === 'GET') {\n        return await handleBooksRequest(request, env, path, url);\n      } else if (path.startsWith('/search/books') && request.method === 'GET') {\n        return await handleSearchRequest(request, env, path, url);\n      } else if (path.startsWith('/cache/author/') && request.method === 'POST') {\n        return await handleCacheRequest(request, env, path);\n      } else if (path === '/health') {\n        return await handleHealthCheck(env);\n      }\n\n      return new Response(JSON.stringify({ error: 'Endpoint not found' }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n    } catch (error) {\n      console.error('RPC fetch handler error:', error);\n      return new Response(JSON.stringify({\n        error: 'Internal server error',\n        details: error.message\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  // RPC Method: Get author bibliography with Work/Edition normalization\n  async getAuthorBibliography(authorName) {\n    try {\n      console.log(`\uD83D\uDD27 RPC: getAuthorBibliography(\"${authorName}\")`);\n\n      // Extract path from author name for compatibility with existing function\n      const path = `/author/${encodeURIComponent(authorName)}`;\n      const url = new URL(`https://dummy-url.com${path}`);\n\n      // Call existing handler but return raw data instead of Response\n      const response = await handleAuthorRequest(null, this.env, path, url);\n      const result = await response.json();\n\n      console.log(`\u2705 RPC: Author \"${authorName}\" returned ${result.books?.length || 0} books`);\n      return result;\n    } catch (error) {\n      console.error(`\u274C RPC: Error getting author \"${authorName}\":`, error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // RPC Method: Get book details by ISBN\n  async getBookDetails(isbn) {\n    try {\n      console.log(`\uD83D\uDD27 RPC: getBookDetails(\"${isbn}\")`);\n\n      const path = `/book/${encodeURIComponent(isbn)}`;\n      const url = new URL(`https://dummy-url.com${path}`);\n\n      const response = await handleBookRequest(null, this.env, path, url);\n      const result = await response.json();\n\n      console.log(`\u2705 RPC: Book \"${isbn}\" details retrieved`);\n      return result;\n    } catch (error) {\n      console.error(`\u274C RPC: Error getting book \"${isbn}\":`, error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // RPC Method: Search books by title\n  async searchBooksByTitle(title) {\n    try {\n      console.log(`\uD83D\uDD27 RPC: searchBooksByTitle(\"${title}\")`);\n\n      const path = `/books/${encodeURIComponent(title)}`;\n      const url = new URL(`https://dummy-url.com${path}`);\n\n      const response = await handleBooksRequest(null, this.env, path, url);\n      const result = await response.json();\n\n      console.log(`\u2705 RPC: Title search \"${title}\" returned ${result.books?.length || 0} books`);\n      return result;\n    } catch (error) {\n      console.error(`\u274C RPC: Error searching title \"${title}\":`, error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // RPC Method: Health check\n  async getHealthStatus() {\n    try {\n      const response = await handleHealthCheck(this.env);\n      return await response.json();\n    } catch (error) {\n      return { status: 'error', error: error.message };\n    }\n  }\n}\n\n\n/**\n * Handle author biography requests - Pattern 1: Author works in English\n * URL: /author/andy%20weir?page=10&pageSize=50&language=en\n */\nasync function handleAuthorRequest(request, env, path, url) {\n  const authorName = decodeURIComponent(path.replace('/author/', ''));\n\n  if (!authorName || authorName.trim().length === 0) {\n    return new Response(JSON.stringify({\n      error: 'Author name is required'\n    }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  console.log(`Fetching bibliography for author: ${authorName}`);\n\n  try {\n    // Check cache first\n    const cacheKey = `author:${authorName.toLowerCase()}`;\n    const cached = await env.KV_CACHE.get(cacheKey, 'json');\n\n    if (cached) {\n      console.log(`Cache hit for ${authorName}`);\n      return new Response(JSON.stringify({\n        success: true,\n        author: authorName,\n        books: cached.books,\n        totalBooks: cached.books.length,\n        cached: true,\n        timestamp: cached.timestamp\n      }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'public, max-age=3600'\n        }\n      });\n    }\n\n    // Rate limiting check\n    await enforceRateLimit(env);\n\n    // Extract query parameters for proven pattern\n    const page = url.searchParams.get('page') || '1';\n    const pageSize = url.searchParams.get('pageSize') || '50';\n    const language = url.searchParams.get('language') || 'en';\n\n    // Fetch from ISBNdb using proven pattern\n    const bibliography = await fetchAuthorBibliography(authorName, env, { page, pageSize, language });\n\n    if (!bibliography.books || bibliography.books.length === 0) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'No books found for author',\n        author: authorName\n      }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Process books using Work/Edition normalization\n    const processedData = normalizeWorksFromISBNdb(bibliography.books, authorName);\n\n    // Legacy format for backward compatibility\n    const processedBooks = processedData.works.flatMap(work =>\n      work.editions.map(edition => ({\n        ...edition,\n        // Add work-level data for legacy compatibility\n        work_title: work.title,\n        work_identifiers: work.identifiers,\n        work_authors: work.authors\n      }))\n    );\n\n    // Cache both normalized and legacy formats\n    const cacheData = {\n      // NEW: Normalized Work/Edition structure\n      works: processedData.works,\n      authors: processedData.authors,\n\n      // Legacy format for backward compatibility\n      books: processedBooks,\n\n      // Metadata\n      timestamp: new Date().toISOString(),\n      source: 'isbndb',\n      total: bibliography.total || processedBooks.length,\n      format: 'enhanced_work_edition_v1'\n    };\n\n    await env.KV_CACHE.put(cacheKey, JSON.stringify(cacheData), {\n      expirationTtl: 86400 // 24 hours\n    });\n\n    console.log(`Successfully fetched ${processedBooks.length} books for ${authorName}`);\n\n    return new Response(JSON.stringify({\n      success: true,\n      author: authorName,\n      books: processedBooks,\n      totalBooks: processedBooks.length,\n      total: bibliography.total,\n      cached: false,\n      timestamp: new Date().toISOString()\n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'public, max-age=3600'\n      }\n    });\n\n  } catch (error) {\n    console.error(`Error fetching author ${authorName}:`, error);\n\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to fetch author bibliography',\n      author: authorName,\n      details: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Pattern 2: Book by ISBN (10 or 13 digit)\n * URL: /book/9780385539258?with_prices=0\n */\nasync function handleBookRequest(request, env, path, url) {\n  const isbn = path.replace('/book/', '');\n\n  if (!isbn || isbn.trim().length === 0) {\n    return new Response(JSON.stringify({ error: 'ISBN is required' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  console.log(`Fetching book by ISBN: ${isbn}`);\n\n  try {\n    const cacheKey = `book:${isbn}`;\n    const cached = await env.KV_CACHE.get(cacheKey, 'json');\n\n    if (cached) {\n      console.log(`Cache hit for ISBN ${isbn}`);\n      return new Response(JSON.stringify({ ...cached, cached: true }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }\n      });\n    }\n\n    await enforceRateLimit(env);\n\n    const withPrices = url.searchParams.get('with_prices') || '0';\n    const bookData = await fetchBookByISBN(isbn, env, { withPrices });\n\n    await env.KV_CACHE.put(cacheKey, JSON.stringify({ ...bookData, timestamp: new Date().toISOString() }), {\n      expirationTtl: 86400\n    });\n\n    return new Response(JSON.stringify({ ...bookData, cached: false }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }\n    });\n\n  } catch (error) {\n    console.error(`Error fetching ISBN ${isbn}:`, error);\n    return new Response(JSON.stringify({ success: false, error: error.message, isbn }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Pattern 3: Title-only search\n * URL: /books/a%20little%20life?page=1&pageSize=25&column=title&language=en&shouldMatchAll=1\n */\nasync function handleBooksRequest(request, env, path, url) {\n  const title = decodeURIComponent(path.replace('/books/', ''));\n\n  if (!title || title.trim().length === 0) {\n    return new Response(JSON.stringify({ error: 'Title is required' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  console.log(`Searching books by title: ${title}`);\n\n  try {\n    const cacheKey = `books:title:${title.toLowerCase()}`;\n    const cached = await env.KV_CACHE.get(cacheKey, 'json');\n\n    if (cached) {\n      console.log(`Cache hit for title search: ${title}`);\n      return new Response(JSON.stringify({ ...cached, cached: true }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }\n      });\n    }\n\n    await enforceRateLimit(env);\n\n    const params = {\n      page: url.searchParams.get('page') || '1',\n      pageSize: url.searchParams.get('pageSize') || '25',\n      column: url.searchParams.get('column') || 'title',\n      language: url.searchParams.get('language') || 'en',\n      shouldMatchAll: url.searchParams.get('shouldMatchAll') || '1'\n    };\n\n    const booksData = await fetchBooksByTitle(title, env, params);\n\n    await env.KV_CACHE.put(cacheKey, JSON.stringify({ ...booksData, timestamp: new Date().toISOString() }), {\n      expirationTtl: 86400\n    });\n\n    return new Response(JSON.stringify({ ...booksData, cached: false }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }\n    });\n\n  } catch (error) {\n    console.error(`Error searching title ${title}:`, error);\n    return new Response(JSON.stringify({ success: false, error: error.message, title }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Pattern 4: Combined author + title + publisher search\n * URL: /search/books?page=1&pageSize=50&author=andy%20weir&text=the%20martian&publisher=crown\n */\nasync function handleSearchRequest(request, env, path, url) {\n  const author = url.searchParams.get('author');\n  const text = url.searchParams.get('text');\n  const publisher = url.searchParams.get('publisher');\n\n  if (!author && !text && !publisher) {\n    return new Response(JSON.stringify({ error: 'At least one search parameter (author, text, publisher) is required' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  console.log(`Combined search - Author: ${author}, Text: ${text}, Publisher: ${publisher}`);\n\n  try {\n    const cacheKey = `search:${author || 'none'}:${text || 'none'}:${publisher || 'none'}`;\n    const cached = await env.KV_CACHE.get(cacheKey, 'json');\n\n    if (cached) {\n      console.log(`Cache hit for combined search`);\n      return new Response(JSON.stringify({ ...cached, cached: true }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }\n      });\n    }\n\n    await enforceRateLimit(env);\n\n    const params = {\n      page: url.searchParams.get('page') || '1',\n      pageSize: url.searchParams.get('pageSize') || '50',\n      author,\n      text,\n      publisher\n    };\n\n    const searchData = await fetchCombinedSearch(env, params);\n\n    await env.KV_CACHE.put(cacheKey, JSON.stringify({ ...searchData, timestamp: new Date().toISOString() }), {\n      expirationTtl: 86400\n    });\n\n    return new Response(JSON.stringify({ ...searchData, cached: false }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }\n    });\n\n  } catch (error) {\n    console.error(`Error in combined search:`, error);\n    return new Response(JSON.stringify({ success: false, error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Handle cache operations\n */\nasync function handleCacheRequest(request, env, path) {\n  const authorName = decodeURIComponent(path.replace('/cache/author/', ''));\n\n  if (!authorName || authorName.trim().length === 0) {\n    return new Response(JSON.stringify({\n      error: 'Author name is required'\n    }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  try {\n    // Force refresh from ISBNdb\n    await enforceRateLimit(env);\n    const bibliography = await fetchAuthorBibliography(authorName, env);\n\n    if (!bibliography.books || bibliography.books.length === 0) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'No books found for author',\n        author: authorName\n      }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Process with work normalization\n    const processedData = normalizeWorksFromISBNdb(bibliography.books, authorName);\n    const processedBooks = processedData.works.flatMap(work =>\n      work.editions.map(edition => ({\n        ...edition,\n        work_title: work.title,\n        work_identifiers: work.identifiers,\n        work_authors: work.authors\n      }))\n    );\n\n    // Store normalized data in both KV and R2\n    const cacheKey = `author:${authorName.toLowerCase()}`;\n    const cacheData = {\n      // NEW: Normalized Work/Edition structure\n      works: processedData.works,\n      authors: processedData.authors,\n\n      // Legacy format for backward compatibility\n      books: processedBooks,\n\n      timestamp: new Date().toISOString(),\n      source: 'isbndb',\n      format: 'enhanced_work_edition_v1'\n    };\n\n    // KV storage (hot cache)\n    await env.KV_CACHE.put(cacheKey, JSON.stringify(cacheData), {\n      expirationTtl: 86400\n    });\n\n    // R2 storage (cold cache)\n    const r2Key = `authors/${authorName.toLowerCase()}.json`;\n    await env.R2_BUCKET.put(r2Key, JSON.stringify(cacheData), {\n      httpMetadata: { contentType: 'application/json' }\n    });\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Author bibliography cached successfully',\n      author: authorName,\n      booksCount: processedBooks.length,\n      cached: {\n        kv: true,\n        r2: true\n      }\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error(`Error caching author ${authorName}:`, error);\n\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to cache author bibliography',\n      author: authorName,\n      details: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Health check endpoint\n */\nasync function handleHealthCheck(env) {\n  const timestamp = new Date().toISOString();\n\n  try {\n    // Test KV connectivity\n    const kvTest = await env.KV_CACHE.get('health:test');\n    await env.KV_CACHE.put('health:test', timestamp, { expirationTtl: 60 });\n\n    // Test R2 connectivity\n    const r2Test = await env.R2_BUCKET.head('health/test.json');\n\n    return new Response(JSON.stringify({\n      status: 'healthy',\n      timestamp,\n      services: {\n        kv: 'connected',\n        r2: 'connected',\n        isbndb: env.ISBNDB_API_KEY ? 'configured' : 'missing'\n      },\n      version: '1.1.0-enhanced',\n      patterns: {\n        'author_works': '/author/{name}?language=en',\n        'book_isbn': '/book/{isbn}?with_prices=0',\n        'title_search': '/books/{title}?column=title&language=en',\n        'combined_search': '/search/books?author=X&text=Y'\n      }\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    return new Response(JSON.stringify({\n      status: 'unhealthy',\n      timestamp,\n      error: error.message\n    }), {\n      status: 503,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Fetch author bibliography from ISBNdb using proven working pattern\n */\nasync function fetchAuthorBibliography(authorName, env, params = {}) {\n  if (!env.ISBNDB_API_KEY) {\n    throw new Error('ISBNDB_API_KEY not configured');\n  }\n\n  const apiKey = await env.ISBNDB_API_KEY.get();\n  if (!apiKey) {\n    throw new Error('ISBNDB_API_KEY retrieved but empty');\n  }\n\n  // Pattern 1: Exact format that works with curl\n  const { page = '1', pageSize = '50', language = 'en' } = params;\n  const url = `https://api2.isbndb.com/author/${encodeURIComponent(authorName)}?page=${page}&pageSize=${pageSize}&language=${language}`;\n\n  console.log(`ISBNdb author request: ${url}`);\n\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'accept': 'application/json',\n      'Authorization': apiKey\n    }\n  });\n\n  console.log(`ISBNdb response status: ${response.status}`);\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`ISBNdb API error: ${response.status} - ${errorText}`);\n    throw new Error(`ISBNdb API error: ${response.status} - ${errorText}`);\n  }\n\n  const data = await response.json();\n  console.log(`ISBNdb returned ${data.books?.length || 0} books`);\n\n  return data;\n}\n\n/**\n * Fetch book by ISBN using proven pattern 2\n */\nasync function fetchBookByISBN(isbn, env, params = {}) {\n  if (!env.ISBNDB_API_KEY) {\n    throw new Error('ISBNDB_API_KEY not configured');\n  }\n\n  const apiKey = await env.ISBNDB_API_KEY.get();\n  if (!apiKey) {\n    throw new Error('ISBNDB_API_KEY retrieved but empty');\n  }\n\n  const { withPrices = '0' } = params;\n  const url = `https://api2.isbndb.com/book/${isbn}?with_prices=${withPrices}`;\n\n  console.log(`ISBNdb book request: ${url}`);\n\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'accept': 'application/json',\n      'Authorization': apiKey\n    }\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`ISBNdb book API error: ${response.status} - ${errorText}`);\n    throw new Error(`ISBNdb book API error: ${response.status} - ${errorText}`);\n  }\n\n  const data = await response.json();\n  console.log(`ISBNdb returned book data for ISBN ${isbn}`);\n\n  return { success: true, book: data.book, source: 'isbndb' };\n}\n\n/**\n * Fetch books by title using proven pattern 3\n */\nasync function fetchBooksByTitle(title, env, params = {}) {\n  if (!env.ISBNDB_API_KEY) {\n    throw new Error('ISBNDB_API_KEY not configured');\n  }\n\n  const apiKey = await env.ISBNDB_API_KEY.get();\n  if (!apiKey) {\n    throw new Error('ISBNDB_API_KEY retrieved but empty');\n  }\n\n  const { page = '1', pageSize = '25', column = 'title', language = 'en', shouldMatchAll = '1' } = params;\n  const url = `https://api2.isbndb.com/books/${encodeURIComponent(title)}?page=${page}&pageSize=${pageSize}&column=${column}&language=${language}&shouldMatchAll=${shouldMatchAll}`;\n\n  console.log(`ISBNdb books request: ${url}`);\n\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'accept': 'application/json',\n      'Authorization': apiKey\n    }\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`ISBNdb books API error: ${response.status} - ${errorText}`);\n    throw new Error(`ISBNdb books API error: ${response.status} - ${errorText}`);\n  }\n\n  const data = await response.json();\n  console.log(`ISBNdb returned ${data.books?.length || 0} books for title search`);\n\n  return { success: true, books: data.books, total: data.total, source: 'isbndb' };\n}\n\n/**\n * Combined search using proven pattern 4\n */\nasync function fetchCombinedSearch(env, params = {}) {\n  if (!env.ISBNDB_API_KEY) {\n    throw new Error('ISBNDB_API_KEY not configured');\n  }\n\n  const apiKey = await env.ISBNDB_API_KEY.get();\n  if (!apiKey) {\n    throw new Error('ISBNDB_API_KEY retrieved but empty');\n  }\n\n  const { page = '1', pageSize = '50', author, text, publisher } = params;\n\n  const urlParams = new URLSearchParams({\n    page,\n    pageSize\n  });\n\n  if (author) urlParams.append('author', author);\n  if (text) urlParams.append('text', text);\n  if (publisher) urlParams.append('publisher', publisher);\n\n  const url = `https://api2.isbndb.com/search/books?${urlParams.toString()}`;\n\n  console.log(`ISBNdb combined search request: ${url}`);\n\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'accept': 'application/json',\n      'Authorization': apiKey\n    }\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`ISBNdb search API error: ${response.status} - ${errorText}`);\n    throw new Error(`ISBNdb search API error: ${response.status} - ${errorText}`);\n  }\n\n  const data = await response.json();\n  console.log(`ISBNdb returned ${data.books?.length || 0} books for combined search`);\n\n  return { success: true, books: data.books, total: data.total, source: 'isbndb' };\n}\n\n/**\n * Select the best edition from available books\n */\nfunction selectBestEdition(books, originalISBN = null) {\n  if (!books || books.length === 0) return null;\n\n  const scoredBooks = books\n    .filter(book => book.title && book.authors)\n    .map(book => ({\n      ...book,\n      score: calculateEditionScore(book, originalISBN)\n    }))\n    .sort((a, b) => b.score - a.score);\n\n  return scoredBooks.length > 0 ? scoredBooks[0] : null;\n}\n\n/**\n * Calculate quality score for book editions\n */\nfunction calculateEditionScore(book, originalISBN) {\n  let score = 0;\n\n  // Prefer original ISBN if it matches\n  if (originalISBN && (book.isbn13 === originalISBN || book.isbn === originalISBN)) {\n    score += 100;\n  }\n\n  // Avoid low-quality publishers\n  const publisher = (book.publisher || '').toLowerCase();\n  if (!publisher.includes('createspace') &&\n      !publisher.includes('publishamerica') &&\n      !publisher.includes('lightning source') &&\n      !publisher.includes('independently published')) {\n    score += 20;\n  }\n\n  // Avoid study guides and classroom materials\n  const title = (book.title || '').toLowerCase();\n  if (!title.includes('study guide') &&\n      !title.includes('classroom') &&\n      !title.includes('large print') &&\n      !title.includes('companion') &&\n      !title.includes('workbook') &&\n      !title.includes('test prep') &&\n      !title.includes('exam guide')) {\n    score += 15;\n  }\n\n  // Prefer standard bindings\n  const binding = (book.binding || '').toLowerCase();\n  if (binding.includes('hardcover')) score += 10;\n  else if (binding.includes('paperback')) score += 8;\n  else if (binding.includes('trade paperback')) score += 9;\n\n  // Prefer recent editions (better metadata)\n  if (book.date_published) {\n    const year = parseInt(book.date_published);\n    if (year > 2010) score += 8;\n    if (year > 2000) score += 5;\n  }\n\n  // Prefer books with more metadata\n  if (book.synopsis) score += 5;\n  if (book.dewey_decimal) score += 3;\n  if (book.subjects && book.subjects.length > 0) score += 3;\n\n  return score;\n}\n\n/**\n * ENHANCED: Normalize ISBNdb books into Work/Edition/Author structure\n * Matches SwiftData model normalization with external API identifiers\n */\nfunction normalizeWorksFromISBNdb(books, searchAuthor) {\n  if (!books || !Array.isArray(books)) {\n    return { works: [], authors: [] };\n  }\n\n  const worksMap = new Map();\n  const authorsMap = new Map();\n  const processedAuthor = searchAuthor?.toLowerCase();\n\n  console.log(`Normalizing ${books.length} books into Work/Edition structure`);\n\n  books.forEach(book => {\n    if (!book.title || !book.authors) return;\n\n    // Generate work identifier - prefer title + primary author\n    const primaryAuthor = Array.isArray(book.authors) ? book.authors[0] : book.authors;\n    const workKey = generateWorkKey(book.title, primaryAuthor);\n\n    // Process authors first\n    const authorsList = Array.isArray(book.authors) ? book.authors : [book.authors];\n    const processedAuthors = [];\n\n    authorsList.forEach(authorName => {\n      const authorKey = authorName.toLowerCase();\n\n      if (!authorsMap.has(authorKey)) {\n        authorsMap.set(authorKey, {\n          name: authorName,\n          identifiers: {\n            openLibraryID: null,        // To be filled by OpenLibrary integration\n            isbndbID: null,             // ISBNdb doesn't provide author IDs consistently\n            googleBooksID: null,        // To be filled by Google Books integration\n            goodreadsID: null           // Future integration\n          },\n          // Infer basic metadata from context\n          gender: 'unknown',\n          culturalRegion: null,\n          nationality: null,\n          works: []\n        });\n      }\n\n      processedAuthors.push(authorsMap.get(authorKey));\n    });\n\n    // Create or update work\n    if (!worksMap.has(workKey)) {\n      worksMap.set(workKey, {\n        title: book.title,\n        originalLanguage: book.language || 'en',\n        firstPublicationYear: extractYear(book.date_published),\n\n        // External API identifiers (SwiftData Work model)\n        identifiers: {\n          openLibraryID: null,              // To be filled by OpenLibrary integration\n          isbndbID: book.id || book.isbn13, // Use book ID or ISBN as work identifier\n          googleBooksVolumeID: null,        // To be filled by Google Books integration\n          goodreadsID: null                 // Future integration\n        },\n\n        // Authors for this work\n        authors: processedAuthors.map(author => ({\n          name: author.name,\n          identifiers: author.identifiers\n        })),\n\n        // Editions of this work\n        editions: []\n      });\n    }\n\n    const work = worksMap.get(workKey);\n\n    // Create edition from ISBNdb book data\n    const edition = {\n      // ISBN support - multiple ISBNs per edition\n      isbn: book.isbn13 || book.isbn,\n      isbns: collectISBNs(book),\n\n      // Edition metadata\n      publisher: book.publisher,\n      publicationDate: book.date_published,\n      pageCount: book.pages ? parseInt(book.pages) : null,\n      format: normalizeFormat(book.binding),\n      coverImageURL: book.image,\n      editionTitle: extractEditionTitle(book.title, work.title),\n\n      // External API identifiers (SwiftData Edition model)\n      identifiers: {\n        openLibraryID: null,        // To be filled by OpenLibrary integration\n        isbndbID: book.id,          // ISBNdb book ID\n        googleBooksVolumeID: null,  // To be filled by Google Books integration\n        goodreadsID: null           // Future integration\n      },\n\n      // ISBNdb-specific metadata\n      isbndb_metadata: {\n        lastSync: new Date().toISOString(),\n        quality: calculateEditionScore(book),\n        source: 'isbndb',\n        subjects: book.subjects || [],\n        synopsis: book.synopsis\n      }\n    };\n\n    // Add edition to work (avoid duplicates by ISBN)\n    const existingEdition = work.editions.find(e =>\n      e.isbn === edition.isbn ||\n      e.isbns.some(isbn => edition.isbns.includes(isbn))\n    );\n\n    if (!existingEdition) {\n      work.editions.push(edition);\n    } else {\n      // Merge edition data (keep highest quality)\n      if (edition.isbndb_metadata.quality > (existingEdition.isbndb_metadata?.quality || 0)) {\n        Object.assign(existingEdition, edition);\n      }\n    }\n  });\n\n  const works = Array.from(worksMap.values());\n  const authors = Array.from(authorsMap.values());\n\n  // Update author works references\n  authors.forEach(author => {\n    author.works = works\n      .filter(work => work.authors.some(workAuthor =>\n        workAuthor.name.toLowerCase() === author.name.toLowerCase()\n      ))\n      .map(work => ({\n        workIdentifier: generateWorkKey(work.title, work.authors[0].name),\n        title: work.title,\n        firstPublicationYear: work.firstPublicationYear\n      }));\n  });\n\n  console.log(`Normalized into ${works.length} works and ${authors.length} authors`);\n  return { works, authors };\n}\n\n/**\n * Generate consistent work identifier from title and primary author\n */\nfunction generateWorkKey(title, primaryAuthor) {\n  const cleanTitle = title.toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, '')\n    .replace(/\\s+/g, '-')\n    .substring(0, 50);\n\n  const cleanAuthor = primaryAuthor.toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, '')\n    .replace(/\\s+/g, '-')\n    .substring(0, 30);\n\n  return `${cleanTitle}-${cleanAuthor}`;\n}\n\n/**\n * Collect all ISBNs from ISBNdb book object\n */\nfunction collectISBNs(book) {\n  const isbns = [];\n  if (book.isbn13) isbns.push(book.isbn13);\n  if (book.isbn) isbns.push(book.isbn);\n  if (book.isbn10) isbns.push(book.isbn10);\n\n  // Remove duplicates\n  return [...new Set(isbns)];\n}\n\n/**\n * Normalize ISBNdb binding format to SwiftData EditionFormat\n */\nfunction normalizeFormat(binding) {\n  if (!binding) return 'unknown';\n\n  const bindingLower = binding.toLowerCase();\n  if (bindingLower.includes('hardcover') || bindingLower.includes('hardback')) return 'hardcover';\n  if (bindingLower.includes('paperback') || bindingLower.includes('softcover')) return 'paperback';\n  if (bindingLower.includes('trade paperback')) return 'paperback';\n  if (bindingLower.includes('mass market')) return 'massMarketPaperback';\n  if (bindingLower.includes('ebook') || bindingLower.includes('kindle')) return 'ebook';\n  if (bindingLower.includes('audiobook') || bindingLower.includes('audio')) return 'audiobook';\n\n  return 'unknown';\n}\n\n/**\n * Extract edition title (e.g., \"Deluxe Edition\", \"Abridged\") from full title\n */\nfunction extractEditionTitle(fullTitle, workTitle) {\n  if (!fullTitle || !workTitle) return null;\n\n  const editionMarkers = [\n    'deluxe edition', 'special edition', 'anniversary edition', 'collector\\'s edition',\n    'abridged', 'unabridged', 'expanded edition', 'revised edition',\n    'large print', 'mass market edition'\n  ];\n\n  const fullTitleLower = fullTitle.toLowerCase();\n  const workTitleLower = workTitle.toLowerCase();\n\n  // Find edition markers in title\n  for (const marker of editionMarkers) {\n    if (fullTitleLower.includes(marker) && !workTitleLower.includes(marker)) {\n      return marker.split(' ').map(word =>\n        word.charAt(0).toUpperCase() + word.slice(1)\n      ).join(' ');\n    }\n  }\n\n  return null;\n}\n\n/**\n * Extract year from date string\n */\nfunction extractYear(dateString) {\n  if (!dateString) return null;\n\n  const match = dateString.match(/\\d{4}/);\n  return match ? parseInt(match[0]) : null;\n}\n\n/**\n * Enforce ISBNdb rate limiting (1 request per second)\n */\nasync function enforceRateLimit(env) {\n  try {\n    const lastRequest = await env.KV_CACHE.get(RATE_LIMIT_KEY);\n\n    if (lastRequest) {\n      const lastTime = parseInt(lastRequest);\n      const now = Date.now();\n      const timeDiff = now - lastTime;\n\n      if (timeDiff < RATE_LIMIT_INTERVAL) {\n        const waitTime = RATE_LIMIT_INTERVAL - timeDiff;\n        console.log(`Rate limiting: waiting ${waitTime}ms`);\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n    }\n\n    // Store current timestamp\n    await env.KV_CACHE.put(RATE_LIMIT_KEY, Date.now().toString(), {\n      expirationTtl: 60\n    });\n\n  } catch (error) {\n    console.warn('Rate limiting error:', error);\n    // Don't fail the request due to rate limiting issues\n  }\n}\n\n// Export both HTTP handler and RPC class\nexport default {\n  // HTTP fetch handler for direct calls\n  async fetch(request, env, ctx) {\n    const worker = new ISBNdbWorker(env);\n    return await worker.fetch(request, env, ctx);\n  }\n};\n\n// Also export the RPC class for service bindings\nexport { ISBNdbWorker };"],
  "mappings": "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",
  "names": []
}
